{
  "_args": [
    [
      "memdown@https://registry.npmjs.org/memdown/-/memdown-1.2.4.tgz",
      "/home/hottab/Desktop/pouchServers"
    ]
  ],
  "_from": "memdown@1.2.4",
  "_id": "memdown@1.2.4",
  "_inCache": true,
  "_location": "/memdown",
  "_phantomChildren": {},
  "_requested": {
    "name": "memdown",
    "raw": "memdown@https://registry.npmjs.org/memdown/-/memdown-1.2.4.tgz",
    "rawSpec": "https://registry.npmjs.org/memdown/-/memdown-1.2.4.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/memdown/-/memdown-1.2.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/memdown/-/memdown-1.2.4.tgz",
  "_shasum": "cd9a34aaf074d53445a271108eb4b8dd4ec0f27f",
  "_shrinkwrap": null,
  "_spec": "memdown@https://registry.npmjs.org/memdown/-/memdown-1.2.4.tgz",
  "_where": "/home/hottab/Desktop/pouchServers",
  "authors": [
    "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)"
  ],
  "browser": {
    "./immediate.js": "./immediate-browser.js",
    "rimraf": false
  },
  "bugs": {
    "url": "https://github.com/Level/memdown/issues"
  },
  "contributors": [
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    }
  ],
  "dependencies": {
    "abstract-leveldown": "2.4.1",
    "functional-red-black-tree": "^1.0.1",
    "immediate": "^3.2.3",
    "inherits": "~2.0.1",
    "ltgt": "~2.1.3"
  },
  "description": "An drop-in replacement for LevelDOWN that works in memory only",
  "devDependencies": {
    "bench": "*",
    "faucet": "*",
    "istanbul": "^0.4.2",
    "istanbul-coveralls": "^1.0.3",
    "jshint": "^2.9.1",
    "rimraf": "*",
    "tape": "*",
    "zuul": "^3.9.0"
  },
  "files": [
    "immediate-browser.js",
    "immediate.js"
  ],
  "homepage": "https://github.com/Level/memdown",
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup",
    "memory"
  ],
  "license": "MIT",
  "main": "./memdown.js",
  "name": "memdown",
  "optionalDependencies": {},
  "readme": "# MemDOWN [![Travis](https://secure.travis-ci.org/Level/memdown.png)](http://travis-ci.org/Level/memdown) [![Coverage Status](https://coveralls.io/repos/Level/memdown/badge.svg?branch=master&service=github)](https://coveralls.io/github/Level/memdown?branch=master) [![npm](https://img.shields.io/npm/v/memdown.svg)](https://www.npmjs.com/package/memdown) [![npm](https://img.shields.io/npm/dm/memdown.svg)](https://www.npmjs.com/package/memdown)\n\n<img alt=\"LevelDB Logo\" height=\"100\" src=\"http://leveldb.org/img/logo.svg\">\n\nA drop-in replacement for [LevelDOWN](https://github.com/rvagg/node-leveldown) that works in-memory.\nCan be used as a backend for [LevelUP](https://github.com/rvagg/node-levelup) rather than an actual LevelDB store.\n\n## Example\n\nAs of version 0.7, LevelUP allows you to pass a `'db'` option when you create a new instance. This will override the default LevelDOWN store with a LevelDOWN API compatible object. MemDOWN conforms exactly to the LevelDOWN API but only performs operations in memory, so your data is discarded when the process ends or you release a reference to the database.\n\n```js\nvar levelup = require('levelup')\n  // note that if multiple instances point to the same location,\n  // the db will be shared, but only per process\n  , db = levelup('/some/location', { db: require('memdown') })\n\ndb.put('name', 'Clint Eastwood')\ndb.put('dob', 'May 31, 1930')\ndb.put('occupation', 'Badass')\n\ndb.readStream()\n  .on('data', console.log)\n  .on('close', function () { console.log('Go ahead, make my day!') })\n```\n\nNote in this example we're not even bothering to use callbacks on our `.put()` methods even though they are async. We know that MemDOWN operates immediately so the data will go straight into the store.\n\nRunning our example gives:\n\n```\n{ key: 'dob', value: 'May 31, 1930' }\n{ key: 'name', value: 'Clint Eastwood' }\n{ key: 'occupation', value: 'Badass' }\nGo ahead, make my day!\n```\n\nGlobal Store\n---\n\nEven though it's in memory, the location parameter does do something. MemDOWN\nhas a global cache, which it uses to save databases by the path string.\n\nSo for instance if you create these two MemDOWNs:\n\n```js\nvar db1 = levelup('foo', {db: require('memdown')});\nvar db2 = levelup('foo', {db: require('memdown')});\n```\n\n...they will actually share the same data, because the `'foo'` string is the same.\n\nYou may clear this global store via the `MemDOWN.clearGlobalStore()` function:\n\n```js\nrequire('memdown').clearGlobalStore();\n```\n\nBy default, it doesn't delete the store but replaces it with a new one, so the open instance of MemDOWN will not be affected.\n\n`clearGlobalStore` takes a single parameter, which if truthy clears the store strictly by deleting each individual key:\n\n```js\nrequire('memdown').clearGlobalStore(true); // delete each individual key\n```\n\nIf you are using MemDOWN somewhere else while simultaneously clearing the global store in this way, then it may throw an error or cause unexpected results.\n\nBrowser support\n----\n\nSee [.zuul.yml](https://github.com/Level/memdown/blob/master/.zuul.yml) for the full list of browsers that are tested in CI.\n\nBut essentially, this module requires a valid ES5-capable browser, so if you're using one that's not ES5-capable (e.g. PhantomJS, Android < 4.4, IE < 10), then you will need [the es5-shim](https://github.com/es-shims/es5-shim).\n\nTesting\n----\n\n    npm install\n    \nThen:\n\n    npm test\n\nOr to test in the browser using Saucelabs:\n\n    npm run test-browser\n    \nOr to test locally in your browser of choice:\n\n    npm run test-browser-local\n\nTo run the linter:\n\n    npm run lint\n\nTo check code coverage:\n\n    npm run coverage\n\nLicence\n---\n\nMemDOWN is Copyright (c) 2013-2015 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Level/memdown.git"
  },
  "scripts": {
    "coverage": "istanbul cover -i memdown.js ./node_modules/.bin/tape ./test.js && istanbul check-coverage --lines 90 --function 80 --statements 90 --branches 80",
    "lint": "jshint -c .jshintrc memdown.js",
    "report-coverage": "npm run coverage && istanbul-coveralls",
    "test": "npm run lint && node ./test.js --stderr | faucet",
    "test-browser": "zuul --no-coverage ./test.js",
    "test-browser-local": "zuul --no-coverage --local 9000 ./test.js"
  },
  "version": "1.2.4"
}
