{
  "_args": [
    [
      "express-ws@https://registry.npmjs.org/express-ws/-/express-ws-3.0.0.tgz",
      "/home/hottab/Desktop/pouchServers"
    ]
  ],
  "_from": "express-ws@latest",
  "_id": "express-ws@3.0.0",
  "_inCache": true,
  "_location": "/express-ws",
  "_phantomChildren": {},
  "_requested": {
    "name": "express-ws",
    "raw": "express-ws@https://registry.npmjs.org/express-ws/-/express-ws-3.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/express-ws/-/express-ws-3.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/express-ws/-/express-ws-3.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-ws/-/express-ws-3.0.0.tgz",
  "_shasum": "7ddaaf3b7c758865c099905989911b6234477dbd",
  "_shrinkwrap": null,
  "_spec": "express-ws@https://registry.npmjs.org/express-ws/-/express-ws-3.0.0.tgz",
  "_where": "/home/hottab/Desktop/pouchServers",
  "author": {
    "email": "henning@morud.org",
    "name": "Henning Morud"
  },
  "bugs": {
    "url": "https://github.com/HenningM/express-ws/issues"
  },
  "contributors": [
    {
      "name": "Jesús Leganés Combarro",
      "email": "piranna@gmail.com"
    },
    {
      "name": "Sven Slootweg",
      "email": "admin@cryto.net"
    },
    {
      "name": "Andrew Phillips",
      "email": "theasp@gmail.com"
    },
    {
      "name": "Nicholas Schell",
      "email": "nschell@gmail.com"
    },
    {
      "name": "Max Truxa",
      "email": "dev@maxtruxa.com"
    },
    {
      "name": "Kræn Hansen",
      "email": "mail@kraenhansen.dk"
    }
  ],
  "dependencies": {
    "ws": "^2.0.0"
  },
  "description": "WebSocket endpoints for Express applications",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-preset-es2015": "^6.5.0",
    "eslint": "^3.15.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-plugin-import": "^2.2.0",
    "express": "^5.0.0-alpha.1"
  },
  "directories": {
    "example": "examples"
  },
  "engines": {
    "node": ">=4.5.0"
  },
  "homepage": "https://github.com/HenningM/express-ws",
  "keywords": [
    "express",
    "websocket",
    "ws"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "name": "express-ws",
  "optionalDependencies": {},
  "peerDependencies": {
    "express": "^4.0.0 || ^5.0.0-alpha.1"
  },
  "readme": "# express-ws [![Dependency Status](https://www.versioneye.com/nodejs/express-ws/badge?style=flat)](https://www.versioneye.com/nodejs/express-ws)\n\n[WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) endpoints for [Express](http://expressjs.com/) applications. Lets you define WebSocket endpoints like any other type of route, and applies regular Express middleware. The WebSocket support is implemented with the help of the [ws](https://github.com/websockets/ws) library.\n\n## Installation\n\n`npm install --save express-ws`\n\n## Usage\n\n__Full documentation can be found in the API section below. This section only shows a brief example.__\n\nAdd this line to your Express application:\n\n```javascript\nvar expressWs = require('express-ws')(app);\n```\n\nNow you will be able to add WebSocket routes (almost) the same way you add other routes. The following snippet sets up a simple echo server at `/echo`.  The `ws` parameter is an instance of the WebSocket class described [here](https://github.com/websockets/ws/blob/master/doc/ws.md#class-websocket).\n\n```javascript\napp.ws('/echo', function(ws, req) {\n  ws.on('message', function(msg) {\n    ws.send(msg);\n  });\n});\n```\n\nIt works with routers, too, this time at `/ws-stuff/echo`:\n\n```javascript\nvar router = express.Router();\n\nrouter.ws('/echo', function(ws, req) {\n  ws.on('message', function(msg) {\n    ws.send(msg);\n  });\n});\n\napp.use(\"/ws-stuff\", router);\n```\n\n## Full example\n\n```javascript\nvar express = require('express');\nvar app = express();\nvar expressWs = require('express-ws')(app);\n\napp.use(function (req, res, next) {\n  console.log('middleware');\n  req.testing = 'testing';\n  return next();\n});\n\napp.get('/', function(req, res, next){\n  console.log('get route', req.testing);\n  res.end();\n});\n\napp.ws('/', function(ws, req) {\n  ws.on('message', function(msg) {\n    console.log(msg);\n  });\n  console.log('socket', req.testing);\n});\n\napp.listen(3000);\n```\n\n## API\n\n### expressWs(app, *server*, *options*)\n\nSets up `express-ws` on the specified `app`. This will modify the global Router prototype for Express as well - see the `leaveRouterUntouched` option for more information on disabling this.\n\n* __app__: The Express application to set up `express-ws` on.\n* __server__: *Optional.* When using a custom `http.Server`, you should pass it in here, so that `express-ws` can use it to set up the WebSocket upgrade handlers. If you don't specify a `server`, you will only be able to use it with the server that is created automatically when you call `app.listen`.\n* __options__: *Optional.* An object containing further options.\n  * __leaveRouterUntouched:__ Set this to `true` to keep `express-ws` from modifying the Router prototype. You will have to manually `applyTo` every Router that you wish to make `.ws` available on, when this is enabled.\n  * __wsOptions:__ Options object passed to WebSocketServer constructor. Necessary for any ws specific features.\n\nThis function will return a new `express-ws` API object, which will be referred to as `wsInstance` in the rest of the documentation.\n\n### wsInstance.app\n\nThis property contains the `app` that `express-ws` was set up on.\n\n### wsInstance.getWss()\n\nReturns the underlying WebSocket server/handler. You can use `wsInstance.getWss().clients` to obtain a list of all the connected WebSocket clients for this server.\n\nNote that this list will include *all* clients, not just those for a specific route - this means that it's often *not* a good idea to use this for broadcasts, for example.\n\n### wsInstance.applyTo(router)\n\nSets up `express-ws` on the given `router` (or other Router-like object). You will only need this in two scenarios:\n\n1. You have enabled `options.leaveRouterUntouched`, or\n2. You are using a custom router that is not based on the express.Router prototype.\n\nIn most cases, you won't need this at all.\n\n## Development\n\nThis module is written in ES6, and uses Babel for compilation. What this means in practice:\n\n* The source code lives in the `src/` directory.\n* After changing this code, make sure to run `npm run build` to compile it.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/HenningM/express-ws.git"
  },
  "scripts": {
    "build": "babel src/ -d lib/",
    "lint": "eslint src/",
    "prepublish": "npm run build"
  },
  "version": "3.0.0"
}
